require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TagsController do
  include Devise::TestHelpers

  def setup(user = :manager)
    #@request.env["devise.mapping"] = Devise.mappings[:manager]
    sign_in FactoryGirl.create(user)
  end



  # This should return the minimal set of attributes required to create a valid
  # Tag. As you add validations to Tag, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) { {  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TagsController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe "GET index" do
    it "should work" do
      setup
      get :index
      response.should be_success
    end
  end

  describe "GET new" do
    it "should work if you have a manager" do
      setup
      get 'new'
      response.status.should be(200)
    end

    it "should not work for an editor" do
      setup(:editor)
      get :new
      response.status.should be(302)
    end

    it "should not work for an the public" do
      get :new
      response.status.should == 302
    end
  end

  describe "GET edit" do
    t = FactoryGirl.build(:tag)
    t.save!
    it "should work if you have a manager" do
      setup
      get :edit, {:id => t.to_param}
      response.status.should be(200)
    end

    it "should not work for an editor" do
      setup(:editor)
      get :edit, {:id => t.to_param}
      response.status.should be(302)
    end

    it "should not work for an the public" do
      get :edit, {:id => t.to_param}
      response.status.should ==302
    end
  end

  describe "GET show" do
    t = FactoryGirl.build(:tag)
    t.save!
    it "should work if you have a manager" do
      setup
      get :show, {:id => t.to_param}
      response.status.should be(200)
    end

    it "should work for an editor" do
      setup(:editor)
      get :show, {:id => t.to_param}
      response.status.should be(200)
    end

    it "should work for the public" do
      get :show, {:id => t.to_param}
      response.status.should be(200)
    end
  end


  describe "Get create" do
    it "should redirect to the show page" do
      setup
      post :create, :tag => FactoryGirl.attributes_for(:tag)
      response.status.should == 302
    end
  end

  describe "Get update" do
    it "should redirect to the show page" do
      setup
      t = FactoryGirl.create(:tag)
      t.save
      post :update, :id => t.to_param, :tag => FactoryGirl.attributes_for(:tag)
      response.status.should == 302
    end
  end

  describe "Get destroy" do
    it "should redirect to the show page" do
      setup
      t = FactoryGirl.create(:tag)
      t.save
      post :destroy, :id => t.to_param
      response.status.should == 302
    end
  end

  # describe "GET show" do
  #   it "assigns the requested tag as @tag" do
  #     tag = Tag.create! valid_attributes
  #     get :show, {:id => tag.to_param}, valid_session
  #     assigns(:tag).should eq(tag)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new tag as @tag" do
  #     get :new, {}, valid_session
  #     assigns(:tag).should be_a_new(Tag)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested tag as @tag" do
  #     tag = Tag.create! valid_attributes
  #     get :edit, {:id => tag.to_param}, valid_session
  #     assigns(:tag).should eq(tag)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Tag" do
  #       expect {
  #         post :create, {:tag => valid_attributes}, valid_session
  #       }.to change(Tag, :count).by(1)
  #     end

  #     it "assigns a newly created tag as @tag" do
  #       post :create, {:tag => valid_attributes}, valid_session
  #       assigns(:tag).should be_a(Tag)
  #       assigns(:tag).should be_persisted
  #     end

  #     it "redirects to the created tag" do
  #       post :create, {:tag => valid_attributes}, valid_session
  #       response.should redirect_to(Tag.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved tag as @tag" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Tag.any_instance.stub(:save).and_return(false)
  #       post :create, {:tag => {  }}, valid_session
  #       assigns(:tag).should be_a_new(Tag)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Tag.any_instance.stub(:save).and_return(false)
  #       post :create, {:tag => {  }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested tag" do
  #       tag = Tag.create! valid_attributes
  #       # Assuming there are no other tags in the database, this
  #       # specifies that the Tag created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       Tag.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
  #       put :update, {:id => tag.to_param, :tag => { "these" => "params" }}, valid_session
  #     end

  #     it "assigns the requested tag as @tag" do
  #       tag = Tag.create! valid_attributes
  #       put :update, {:id => tag.to_param, :tag => valid_attributes}, valid_session
  #       assigns(:tag).should eq(tag)
  #     end

  #     it "redirects to the tag" do
  #       tag = Tag.create! valid_attributes
  #       put :update, {:id => tag.to_param, :tag => valid_attributes}, valid_session
  #       response.should redirect_to(tag)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the tag as @tag" do
  #       tag = Tag.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Tag.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => tag.to_param, :tag => {  }}, valid_session
  #       assigns(:tag).should eq(tag)
  #     end

  #     it "re-renders the 'edit' template" do
  #       tag = Tag.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Tag.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => tag.to_param, :tag => {  }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested tag" do
  #     tag = Tag.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => tag.to_param}, valid_session
  #     }.to change(Tag, :count).by(-1)
  #   end

  #   it "redirects to the tags list" do
  #     tag = Tag.create! valid_attributes
  #     delete :destroy, {:id => tag.to_param}, valid_session
  #     response.should redirect_to(tags_url)
  #   end
  # end

end
